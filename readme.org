* Emacs org-babel and python
** Notes
*** jupyter settings affecting temp .png generation when ~plt.ioff()~
**** http://jupyter-console.readthedocs.io/en/latest/config_options.html
**** ZMQTerminalInteractiveShell.image_handler: 'tempfile'
**** ZMQTerminalInteractiveShell.tempfile_image_handler: [...]
**** default is 'PIL' which opens Preview.app and deletes tempfile
*** closing of fig handles relevant only in ~%matplotlib inline~ mode
**** InlineBackend.close_figures = False
** use
   - use simply the interactive mode, with ~%matplotlib inline~
   - evoke ~nandu-append-figure~ (s-<return>)
   - in case the figure gets squished due to screen dimensions, use ~plt.switch_backend('agg')~ on the python side and re-execute, followed by ~nandu-append-figure~
     - switch back with ~%matplotlib inline~
** todo
*** TODO nandu save buffer needs to test if directory is present and if file contains any file links
**** maybe enable save-hook only when the first image is added
**** maintain an buffer-local images list like the overlay one and check against if after saving
*** TODO check why org-default-notes-file doesn't take
** Org-babel with [[https://github.com/gregsexton/ob-ipython][ob-ipython]] as an alternative to Jupyter notebooks
I'm currently in the middle of trying out [[http://org-babel.readthedocs.io/en/latest/eval/][org-babel]] as a way to use Emacs' [[http://orgmode.org][org-mode]] instead of [[http://jupyter.org][Jupyter notebooks]] for keeping my [[https://matplotlib.org][matplotlib]] figures organized. Since it's been fairly hard to figure out how to make things work (lots of ~find-function~ calls), I will post here some solutions I have come up with.

*** Saving figures directly in python with [[https://matplotlib.org/api/_as_gen/matplotlib.pyplot.savefig.html#matplotlib-pyplot-savefig][savefig]]
[[https://github.com/gregsexton/ob-ipython][Ob-ipython]] implements, as of this writing, a few nice features such as auto-completing through [[https://company-mode.github.io][company-mode]] (asking the [[https://ipython.readthedocs.io/en/stable/index.html][ipython]] kernel for completion suggestions). It is the [[http://org-babel.readthedocs.io/en/latest/eval/][org-babel]] python backend I'm test-driving, but I don't think there's anything in the code described below that wouldn't work with the regular ob-python backend.

One aspect of how images are handled in [[https://github.com/gregsexton/ob-ipython][ob-ipython]] is that the [[https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-matplotlib][%matplotlib inline]] backend is used to grab image data directly from the [[https://ipython.readthedocs.io/en/stable/index.html][ipython]] kernel, which is then written to file from within Emacs; finally, a link to the file is inserted and ~org-display-inline-images~ (which generates image overlays from links) is called via the ~org-babel-after-execute-hook~. Since I'm way more familiar with python than with elisp, I prefer the idea of controlling the process of writing out the image file in python directly. The following function allows for a different insertion procedure, which has the additional advantage that I can, if I so desire, use an interactive [[https://matplotlib.org][matplotlib]] backend to pop up the figure in a window first.

The following function saves a previously generated figure using the [[https://matplotlib.org/api/_as_gen/matplotlib.pyplot.savefig.html#matplotlib-pyplot-savefig][savefig]] command (assuming [[https://matplotlib.org/api/_as_gen/matplotlib.pyplot.html][matplotlib.pyplot]] has been imported ~as plt~), and uses the function ~org-babel-insert-result~ to append a ~#+RESULTS:~ block after the current /src block/, containing a link to the generated file. A call to ~org-display-inline-images~ at the end replaces links with overlay images:

#+INCLUDE: "./funcs.el::/nandu-append-figure/" src emacs-lisp

This code uses [[https://github.com/gregsexton/ob-ipython][ob-ipython]]'s ~ob-ipython-resources-dir~ to store the image files, but adds subdirectories, one for each /.org/ file that stores images in it (with the subdirectories name being the same as the /.org/ file without extension).

The workflow is hence as follows:
1) Execute the /src block/ with /C-c C-c/ or /,,/ (in [[http://spacemacs.org][Spacemacs]]).
2) Execute the above function, which I for example have bound to /s-<return>/ (I'm on a mac and use the apple key as /super/).

Note that if step 1) produces regular string output, it will be displayed by the usual mechanism, but step 2) will replace it with the image link and overlay.

If no interactive window pop-up is desired, one can simply use the [[https://matplotlib.org/api/matplotlib_configuration_api.html#matplotlib.use][matplotlib.use()]] function. This can be handy as well if it turns out that the interactivte figure canvas is distorted and one wants to re-plot the figure onto a non-interactive canvas (use [[https://matplotlib.org/api/_as_gen/matplotlib.pyplot.switch_backend.html#matplotlib.pyplot.switch_backend][pyplot.switch_backends()]] in that case). Of course, it would also be possible to generally decide on a non-interactive backend and bind a function combining the two steps to the desired key, thereby replicating the usual [[http://org-babel.readthedocs.io/en/latest/eval/][org-babel]] workflow.

*** [[https://github.com/gregsexton/ob-ipython][Ob-ipython]] non-image output
At the time of this writing, [[https://github.com/gregsexton/ob-ipython][ob-ipython]] inserts an [[https://ipython.readthedocs.io/en/stable/index.html][ipython]]-like ~Out[...]~ as a comment before the returned results. Using a separate function, as suggested above, circumnavigates  all output-specific code from the [[https://github.com/gregsexton/ob-ipython][ob-ipython]] side. However, for regular, non-image output the fact that it is a /comment/ that is inserted seems to interrupt org's parsing of the ~#+RESULTS:~ drawer, which is why I override the [[https://github.com/gregsexton/ob-ipython][ob-ipython]] function ~ob-ipython--process-response~ currently with my own with the offending line (~(format "# Out[%d]:\n" (cdr (assoc :exec-count ret)))~) removed. Personally I also prefer my image output *not* to live in [[https://orgmode.org/manual/Drawers.html#Drawers][drawers]] in the way that [[https://github.com/gregsexton/ob-ipython][ob-ipython]] does it, since those are always closed unless explicitly opened.
